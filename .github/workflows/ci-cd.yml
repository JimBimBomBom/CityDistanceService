name: Docker Image CI/CD

on:
    push:
      branches: [ "main" ]
    pull_request:
      branches: [ "main" ]

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
    
      - name: Build Docker images
        run: docker compose -f compose.yaml build
        working-directory: ./CityDistanceService/

      - name: Start services
        run: docker compose -f compose.yaml up --wait --wait-timeout 30
        working-directory: ./CityDistanceService/

      - name: Check /version endpoint
        run: |
            # Give the server time to start
            sleep 10
            
            # Make a request to the /version endpoint
            VERSION_ENDPOINT_RESPONSE=$(curl -s http://localhost:8080/version)
            APP_VERSION=$(grep 'APP_VERSION' env/version.env | cut -d '=' -f2) 
            echo "APP_VERSION=${APP_VERSION}" >> $GITHUB_ENV

            echo "Endpoint version: $VERSION_ENDPOINT_RESPONSE"
            echo "Expected version: $APP_VERSION"
            
            # Assuming $APP_VERSION is set in GitHub secrets or environment variables
            # Remove quotes from the endpoint version
            CLEANED_VERSION_ENDPOINT_RESPONSE=$(echo $VERSION_ENDPOINT_RESPONSE | tr -d '"')
            if [ "$CLEANED_VERSION_ENDPOINT_RESPONSE" != "$APP_VERSION" ]; then
            echo "Version mismatch. Endpoint version: $VERSION_ENDPOINT_RESPONSE, Expected: $APP_VERSION"
            exit 1
            else
            echo "Version match."
            fi
        working-directory: ./CityDistanceService/

      - name: Install Newman
        run: npm install -g newman
        
      - name: Wait for services to initialize
        run: sleep 20    

      - name: Run Postman tests
        run: newman run ./Integration_tests/Integration.postman_collection.json

      - name: Stop services
        run: docker-compose down
        working-directory: ./CityDistanceService/
    
      - name: Push Docker images
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          
          docker tag cds-app:latest cds-app:$APP_VERSION
          docker push cds-app --all-tags  
        working-directory: ./CityDistanceService/
      